{
  "compilerOptions": {
    // 컴파일 할 ECMAScript 버전을 설정
    "target": "ESNext",
    // 코드 내에서 사용되는 모듈시스템 설정
    "module": "ESNext",
    // CommonJS와 ES 모듈 간의 상호 운용성을 제공(즉, commonjs에서도 import 구문을 사용할수 있게)
    "esModuleInterop": true,
    // 대소문자가 다른경우에도 동일한 파일이름을 갖는 파일을 생성하지 못하도록한다
    "forceConsistentCasingInFileNames": false,
    // 모든 엄격한 타입체크 옵션 활성화
    "strict": true,
    // 선언 파일 유형 검사 스킵 (Tpyescript와 관련된 모듈의 타입정보)
    "skipLibCheck": true,
    // Typescript가 JSX해석 하는방식을 설정 
    "jsx": "react-jsx",
    // 기본출력(default export)이 없는 모듈로부터 기본 가져오기를 허용
    // "allowSyntheticDefaultImports": true,
    // 코드내에서 명시적으로 유형을 지정하지 않은 경우 any로 간주되어 오류발생시키도록 설정
    "noImplicitAny": true,
    // 모듈 분석방법설정 (컴파일러에게 올바르게 컴파일할 수 있도록 방법을제공)
    "moduleResolution": "node",
    // 컴파일러에게 어떤 라이브러리를 사용할것인지 알림
    // 기본적으로 dom, exnext를 사용한다. 지정을 할경우 해당 라이브러리 들만사용됨
    "lib": ["dom", "dom.iterable", "esnext"],
    // TypeScript가 JS 파일도 컴파일 할수 있도록 설정(JS와 TS를 같이 사용할경우 등)
    "allowJs": true,
    // TypeScript가 컴파일된 파일의 위치를 저장
    "outDir": "./TSdist",
    // .json 확장자를 가진 파일도 일반적인 모듈처럼 가져와서 사용할수 있도록 설정
    "resolveJsonModule": true,
    // 각 소스코드 파일을 독립적인 모듈로 취급하라고 지시(동일한 변수명 방지)
    "isolatedModules": true,
  },
  // 컴파일에 포함할 파일과 디렉토리를 지정, 명시하지않으면 루트 디렉토리의 TypeScript 파일이 컴파일 대상이됨
  "include": ["src"],
  // "start": "ts-node --esm src/server/index.tsx"
  "ts-node": {
    "esm": true
  }
}